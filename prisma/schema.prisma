// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ServiceType {
  ROUTINE_MAINTENANCE
  OIL_CHANGE
  BRAKE_INSPECTION
  TIRE_ROTATION
  BATTERY_CHECK
  OTHER
}

enum AppointmentStatus {
  BOOKED
  CANCELLED
  COMPLETED
}

enum EmailStatus {
  QUEUED      
  SENT        
  DELIVERED   
  FAILED     
}

enum ScheduledCampaignStatus {
  PENDING    
  EXECUTING  
  COMPLETED  
  CANCELLED  
  FAILED     
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

model Customer {
  id        String   @id @default(uuid())
  email     String   @unique
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime @default(now())

  vehicles Vehicle[]
  emails   Email[]
}

model Vehicle {
  id         String   @id @default(uuid())
  vin        String?  @unique
  plate      String?  @unique
  make       String?
  model      String?
  year       Int?
  customerId String
  createdAt  DateTime @default(now())

  customer       Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  serviceHistory ServiceHistory[]
  appointments   Appointment[]
  ruleTargets    RuleTarget[]
  emails          Email[]
}

model ServiceHistory {
  id          String      @id @default(uuid())
  vehicleId   String
  service     ServiceType
  performedAt DateTime
  notes       String?

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model Rule {
  id              String      @id @default(uuid())
  name            String
  service         ServiceType
  cadenceMonths   Int
  sendWindowDays  Int         @default(0)
  sendWindowHours Int         @default(0)
  timezone        String      @default("America/Los_Angeles")
  enabled         Boolean     @default(true)
  emailTemplate   String
  createdAt       DateTime    @default(now())

  runs               RuleRun[]
  ruleTargets        RuleTarget[]
  emails             Email[]
  scheduledCampaigns ScheduledCampaign[]
  recurringSchedules RecurringSchedule[]
}

model RuleRun {
  id          String    @id @default(uuid())
  ruleId      String
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  rule              Rule               @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  ruleTargets       RuleTarget[]
  emails            Email[]
  scheduledCampaign ScheduledCampaign?
}

model ScheduledCampaign {
  id                  String                  @id @default(uuid())
  ruleId              String
  scheduledFor        DateTime                
  timezone            String                  @default("America/Los_Angeles")
  status              ScheduledCampaignStatus @default(PENDING)
  executedAt          DateTime?               
  executedRunId       String?                 @unique
  recurringScheduleId String?                 // Link to recurring schedule if this was auto-generated
  createdAt           DateTime                @default(now())
  cancelledAt         DateTime?

  rule              Rule               @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  executedRun       RuleRun?           @relation(fields: [executedRunId], references: [id])
  recurringSchedule RecurringSchedule? @relation(fields: [recurringScheduleId], references: [id], onDelete: SetNull)
}

model RecurringSchedule {
  id               String              @id @default(uuid())
  ruleId           String
  frequency        RecurringFrequency
  timeOfDay        String              // Format: "HH:MM" (24-hour)
  dayOfWeek        Int?                // 0=Sunday, 6=Saturday (for WEEKLY)
  dayOfMonth       Int?                // 1-31 (for MONTHLY)
  timezone         String              @default("America/Los_Angeles")
  startsAt         DateTime            // When recurring schedule begins
  endsAt           DateTime?           // Optional end date
  isActive         Boolean             @default(true)
  lastExecutedAt   DateTime?           // Last time campaign was executed
  nextScheduledFor DateTime?           // Next scheduled execution time
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  rule               Rule                @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  scheduledCampaigns ScheduledCampaign[] // Generated campaigns
}

// Cohort per Run
model RuleTarget {
  id        String @id @default(uuid())
  runId     String
  ruleId    String
  vehicleId String

  run     RuleRun @relation(fields: [runId], references: [id], onDelete: Cascade)
  rule    Rule    @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model Email {
  id          String    @id @default(uuid())
  runId       String?
  ruleId      String?
  customerId  String
  vehicleId   String
  toAddress   String
  subject     String
  body        String
  threadId    String?   
  isReply     Boolean   @default(false)
  queuedAt    DateTime  @default(now())
  sentAt      DateTime?
  deliveredAt DateTime?
  status      EmailStatus  @default(QUEUED)

  run          RuleRun?      @relation(fields: [runId], references: [id], onDelete: SetNull)
  rule         Rule?         @relation(fields: [ruleId], references: [id], onDelete: SetNull)
  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  vehicle      Vehicle       @relation(fields: [vehicleId], references: [id], onDelete: SetNull)
  appointments Appointment[] // Appointments created from this email thread

  @@index([threadId])
}

model Appointment {
  id        String            @id @default(uuid())
  vehicleId String
  service   ServiceType
  startsAt  DateTime
  endsAt    DateTime?
  status    AppointmentStatus @default(BOOKED)
  notes     String?
  threadId  String?           // Reference to the email that started the conversation thread
  createdAt DateTime          @default(now())

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  email   Email?  @relation(fields: [threadId], references: [id], onDelete: SetNull)

  @@index([threadId])
}
